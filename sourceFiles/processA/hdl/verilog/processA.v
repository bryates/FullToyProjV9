// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="processA,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu7p-flvb2104-1-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.857500,HLS_SYN_LAT=16,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=33,HLS_SYN_LUT=163,HLS_VERSION=2018_2}" *)

module processA (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bx_V,
        bx_o_V,
        bx_o_V_ap_vld,
        inmem1_address0,
        inmem1_ce0,
        inmem1_q0,
        inmem2_address0,
        inmem2_ce0,
        inmem2_q0,
        outmem1_address0,
        outmem1_ce0,
        outmem1_we0,
        outmem1_d0,
        outmem2_address0,
        outmem2_ce0,
        outmem2_we0,
        outmem2_d0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1:0] bx_V;
output  [1:0] bx_o_V;
output   bx_o_V_ap_vld;
output  [4:0] inmem1_address0;
output   inmem1_ce0;
input  [31:0] inmem1_q0;
output  [4:0] inmem2_address0;
output   inmem2_ce0;
input  [31:0] inmem2_q0;
output  [4:0] outmem1_address0;
output   outmem1_ce0;
output   outmem1_we0;
output  [31:0] outmem1_d0;
output  [5:0] outmem2_address0;
output   outmem2_ce0;
output   outmem2_we0;
output  [31:0] outmem2_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg inmem1_ce0;
reg inmem2_ce0;
reg outmem1_ce0;
reg outmem1_we0;
reg outmem2_ce0;
reg outmem2_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_3_fu_239_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    bx_o_V_1_ack_in;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [1:0] bx_o_V_1_data_reg;
reg    bx_o_V_1_vld_reg;
reg    bx_o_V_1_vld_in;
reg   [0:0] do_init_reg_126;
reg   [1:0] bx_V3_rewind_reg_142;
reg   [3:0] i1_reg_156;
reg   [1:0] bx_V3_phi_reg_170;
wire   [63:0] tmp_6_cast_fu_215_p1;
reg   [63:0] tmp_6_cast_reg_264;
wire   [6:0] tmp_s_fu_233_p2;
reg   [6:0] tmp_s_reg_279;
reg   [0:0] tmp_3_reg_284;
wire   [3:0] i_fu_245_p2;
reg   [3:0] i_reg_288;
reg    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_phi_mux_do_init_phi_fu_130_p6;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_bx_V3_rewind_phi_fu_146_p6;
reg   [3:0] ap_phi_mux_i1_phi_fu_160_p6;
reg   [1:0] ap_phi_mux_bx_V3_phi_phi_fu_175_p4;
wire   [1:0] ap_phi_reg_pp0_iter0_bx_V3_phi_reg_170;
wire   [63:0] tmp_10_cast_fu_258_p1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_fu_193_p1;
wire   [4:0] tmp_2_fu_197_p3;
wire   [5:0] tmp_5_cast_fu_205_p1;
wire   [5:0] tmp_cast_fu_189_p1;
wire   [5:0] tmp_6_fu_209_p2;
wire   [5:0] tmp_8_fu_221_p3;
wire   [6:0] tmp_9_cast_fu_229_p1;
wire   [6:0] tmp_cast2_fu_185_p1;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_150;
reg    ap_condition_136;
reg    ap_condition_45;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 bx_o_V_1_data_reg = 2'd0;
#0 bx_o_V_1_vld_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_45)) begin
        if ((ap_phi_mux_do_init_phi_fu_130_p6 == 1'd0)) begin
            bx_V3_phi_reg_170 <= ap_phi_mux_bx_V3_rewind_phi_fu_146_p6;
        end else if ((ap_phi_mux_do_init_phi_fu_130_p6 == 1'd1)) begin
            bx_V3_phi_reg_170 <= bx_V;
        end else if ((1'b1 == 1'b1)) begin
            bx_V3_phi_reg_170 <= ap_phi_reg_pp0_iter0_bx_V3_phi_reg_170;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (bx_o_V_1_vld_reg == 1'b0) & (bx_o_V_1_vld_in == 1'b1))) begin
        bx_o_V_1_vld_reg <= 1'b1;
    end else if (((bx_o_V_1_vld_in == 1'b0) & (1'b1 == 1'b1) & (bx_o_V_1_vld_reg == 1'b1))) begin
        bx_o_V_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_3_reg_284 == 1'd0))) begin
        do_init_reg_126 <= 1'd0;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_reg_284 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        do_init_reg_126 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_3_reg_284 == 1'd0))) begin
        i1_reg_156 <= i_reg_288;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_reg_284 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        i1_reg_156 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_3_reg_284 == 1'd0))) begin
        bx_V3_rewind_reg_142 <= bx_V3_phi_reg_170;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (bx_o_V_1_vld_reg == 1'b0) & (bx_o_V_1_vld_in == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == 1'b1) & (bx_o_V_1_vld_in == 1'b1) & (bx_o_V_1_vld_reg == 1'b1)))) begin
        bx_o_V_1_data_reg <= ap_phi_mux_bx_V3_phi_phi_fu_175_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_288 <= i_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_3_reg_284 <= tmp_3_fu_239_p2;
        tmp_6_cast_reg_264[5 : 0] <= tmp_6_cast_fu_215_p1[5 : 0];
        tmp_s_reg_279 <= tmp_s_fu_233_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_reg_284 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_150)) begin
        if ((ap_phi_mux_do_init_phi_fu_130_p6 == 1'd0)) begin
            ap_phi_mux_bx_V3_phi_phi_fu_175_p4 = ap_phi_mux_bx_V3_rewind_phi_fu_146_p6;
        end else if ((ap_phi_mux_do_init_phi_fu_130_p6 == 1'd1)) begin
            ap_phi_mux_bx_V3_phi_phi_fu_175_p4 = bx_V;
        end else begin
            ap_phi_mux_bx_V3_phi_phi_fu_175_p4 = ap_phi_reg_pp0_iter0_bx_V3_phi_reg_170;
        end
    end else begin
        ap_phi_mux_bx_V3_phi_phi_fu_175_p4 = ap_phi_reg_pp0_iter0_bx_V3_phi_reg_170;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (tmp_3_reg_284 == 1'd0))) begin
        ap_phi_mux_bx_V3_rewind_phi_fu_146_p6 = bx_V3_phi_reg_170;
    end else begin
        ap_phi_mux_bx_V3_rewind_phi_fu_146_p6 = bx_V3_rewind_reg_142;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_136)) begin
        if ((tmp_3_reg_284 == 1'd1)) begin
            ap_phi_mux_do_init_phi_fu_130_p6 = 1'd1;
        end else if ((tmp_3_reg_284 == 1'd0)) begin
            ap_phi_mux_do_init_phi_fu_130_p6 = 1'd0;
        end else begin
            ap_phi_mux_do_init_phi_fu_130_p6 = do_init_reg_126;
        end
    end else begin
        ap_phi_mux_do_init_phi_fu_130_p6 = do_init_reg_126;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_136)) begin
        if ((tmp_3_reg_284 == 1'd1)) begin
            ap_phi_mux_i1_phi_fu_160_p6 = 4'd0;
        end else if ((tmp_3_reg_284 == 1'd0)) begin
            ap_phi_mux_i1_phi_fu_160_p6 = i_reg_288;
        end else begin
            ap_phi_mux_i1_phi_fu_160_p6 = i1_reg_156;
        end
    end else begin
        ap_phi_mux_i1_phi_fu_160_p6 = i1_reg_156;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_fu_239_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((bx_o_V_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (bx_o_V_1_vld_reg == 1'b1)))) begin
        bx_o_V_1_ack_in = 1'b1;
    end else begin
        bx_o_V_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_fu_239_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bx_o_V_1_vld_in = 1'b1;
    end else begin
        bx_o_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inmem1_ce0 = 1'b1;
    end else begin
        inmem1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inmem2_ce0 = 1'b1;
    end else begin
        inmem2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outmem1_ce0 = 1'b1;
    end else begin
        outmem1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outmem1_we0 = 1'b1;
    end else begin
        outmem1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outmem2_ce0 = 1'b1;
    end else begin
        outmem2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outmem2_we0 = 1'b1;
    end else begin
        outmem2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((bx_o_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((bx_o_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((bx_o_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (bx_o_V_1_ack_in == 1'b0);
end

always @ (*) begin
    ap_condition_136 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

always @ (*) begin
    ap_condition_150 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

always @ (*) begin
    ap_condition_45 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter0_bx_V3_phi_reg_170 = 'bx;

assign bx_o_V = bx_o_V_1_data_reg;

assign bx_o_V_ap_vld = bx_o_V_1_vld_reg;

assign i_fu_245_p2 = (4'd1 + ap_phi_mux_i1_phi_fu_160_p6);

assign inmem1_address0 = tmp_6_cast_fu_215_p1;

assign inmem2_address0 = tmp_6_cast_fu_215_p1;

assign outmem1_address0 = tmp_6_cast_reg_264;

assign outmem1_d0 = inmem1_q0;

assign outmem2_address0 = tmp_10_cast_fu_258_p1;

assign outmem2_d0 = inmem2_q0 << 32'd1;

assign tmp_10_cast_fu_258_p1 = tmp_s_reg_279;

assign tmp_2_fu_197_p3 = {{tmp_fu_193_p1}, {4'd0}};

assign tmp_3_fu_239_p2 = ((ap_phi_mux_i1_phi_fu_160_p6 == 4'd15) ? 1'b1 : 1'b0);

assign tmp_5_cast_fu_205_p1 = tmp_2_fu_197_p3;

assign tmp_6_cast_fu_215_p1 = tmp_6_fu_209_p2;

assign tmp_6_fu_209_p2 = (tmp_5_cast_fu_205_p1 + tmp_cast_fu_189_p1);

assign tmp_8_fu_221_p3 = {{ap_phi_mux_bx_V3_phi_phi_fu_175_p4}, {4'd0}};

assign tmp_9_cast_fu_229_p1 = tmp_8_fu_221_p3;

assign tmp_cast2_fu_185_p1 = ap_phi_mux_i1_phi_fu_160_p6;

assign tmp_cast_fu_189_p1 = ap_phi_mux_i1_phi_fu_160_p6;

assign tmp_fu_193_p1 = ap_phi_mux_bx_V3_phi_phi_fu_175_p4[0:0];

assign tmp_s_fu_233_p2 = (tmp_9_cast_fu_229_p1 + tmp_cast2_fu_185_p1);

always @ (posedge ap_clk) begin
    tmp_6_cast_reg_264[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //processA
